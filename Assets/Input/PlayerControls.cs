//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""14a5f4ec-fdde-4c62-bf71-47abf4d9c0b6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""295ae0ea-df9c-4d9e-946f-ca104e3e2cc6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveA"",
                    ""type"": ""Button"",
                    ""id"": ""dcdd2881-f2f3-4815-a382-35e684011b52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveB"",
                    ""type"": ""Button"",
                    ""id"": ""cb75d3cb-8457-4a19-8e49-b369f1d5dedb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""31e8272b-9ad1-461c-a33c-c7411015a2ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimMove"",
                    ""type"": ""Value"",
                    ""id"": ""b93e5996-2034-44f5-80d8-591c88aed7ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UniteMove"",
                    ""type"": ""Button"",
                    ""id"": ""4b467cb6-6650-4779-b886-c931e7143ea7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Score"",
                    ""type"": ""Button"",
                    ""id"": ""49a3dcf1-80bd-4793-a6d3-ee8f5a870fae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82cd5df1-8738-47c6-a113-8a55ec52ee45"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d2ca503-6876-46ba-b100-830c7c2779c2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f44f620-e5d8-4b8a-a749-54883fd6f7a5"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3de4ecc0-e8e1-4112-9f04-e0675d575f9e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60db12c8-c17b-4d4c-b388-3b06821bd8d9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40f00e1b-bdbf-42b2-9870-ba1d40de6be9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UniteMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27031f69-af24-45cd-ba30-7865a3f9be2f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Score"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LearnMove"",
            ""id"": ""408931ae-80f5-4e61-bb67-3e7851eae6a2"",
            ""actions"": [
                {
                    ""name"": ""Move1"",
                    ""type"": ""Button"",
                    ""id"": ""62cf7c61-c07d-4f35-a18d-4b340347ef3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move2"",
                    ""type"": ""Button"",
                    ""id"": ""2a176320-5752-4cad-9a09-7563a1972267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move3"",
                    ""type"": ""Button"",
                    ""id"": ""3064c63e-edda-470f-9ca5-b5575528e2a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38d13a69-2885-4a64-824a-090007a9c7f4"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07376092-5994-4a70-bde2-a7c3a9a0543b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb6fcd15-c263-4091-9294-ebabfd8d2e09"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_MoveA = m_Movement.FindAction("MoveA", throwIfNotFound: true);
        m_Movement_MoveB = m_Movement.FindAction("MoveB", throwIfNotFound: true);
        m_Movement_BasicAttack = m_Movement.FindAction("BasicAttack", throwIfNotFound: true);
        m_Movement_AimMove = m_Movement.FindAction("AimMove", throwIfNotFound: true);
        m_Movement_UniteMove = m_Movement.FindAction("UniteMove", throwIfNotFound: true);
        m_Movement_Score = m_Movement.FindAction("Score", throwIfNotFound: true);
        // LearnMove
        m_LearnMove = asset.FindActionMap("LearnMove", throwIfNotFound: true);
        m_LearnMove_Move1 = m_LearnMove.FindAction("Move1", throwIfNotFound: true);
        m_LearnMove_Move2 = m_LearnMove.FindAction("Move2", throwIfNotFound: true);
        m_LearnMove_Move3 = m_LearnMove.FindAction("Move3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_MoveA;
    private readonly InputAction m_Movement_MoveB;
    private readonly InputAction m_Movement_BasicAttack;
    private readonly InputAction m_Movement_AimMove;
    private readonly InputAction m_Movement_UniteMove;
    private readonly InputAction m_Movement_Score;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @MoveA => m_Wrapper.m_Movement_MoveA;
        public InputAction @MoveB => m_Wrapper.m_Movement_MoveB;
        public InputAction @BasicAttack => m_Wrapper.m_Movement_BasicAttack;
        public InputAction @AimMove => m_Wrapper.m_Movement_AimMove;
        public InputAction @UniteMove => m_Wrapper.m_Movement_UniteMove;
        public InputAction @Score => m_Wrapper.m_Movement_Score;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MoveA.started += instance.OnMoveA;
            @MoveA.performed += instance.OnMoveA;
            @MoveA.canceled += instance.OnMoveA;
            @MoveB.started += instance.OnMoveB;
            @MoveB.performed += instance.OnMoveB;
            @MoveB.canceled += instance.OnMoveB;
            @BasicAttack.started += instance.OnBasicAttack;
            @BasicAttack.performed += instance.OnBasicAttack;
            @BasicAttack.canceled += instance.OnBasicAttack;
            @AimMove.started += instance.OnAimMove;
            @AimMove.performed += instance.OnAimMove;
            @AimMove.canceled += instance.OnAimMove;
            @UniteMove.started += instance.OnUniteMove;
            @UniteMove.performed += instance.OnUniteMove;
            @UniteMove.canceled += instance.OnUniteMove;
            @Score.started += instance.OnScore;
            @Score.performed += instance.OnScore;
            @Score.canceled += instance.OnScore;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MoveA.started -= instance.OnMoveA;
            @MoveA.performed -= instance.OnMoveA;
            @MoveA.canceled -= instance.OnMoveA;
            @MoveB.started -= instance.OnMoveB;
            @MoveB.performed -= instance.OnMoveB;
            @MoveB.canceled -= instance.OnMoveB;
            @BasicAttack.started -= instance.OnBasicAttack;
            @BasicAttack.performed -= instance.OnBasicAttack;
            @BasicAttack.canceled -= instance.OnBasicAttack;
            @AimMove.started -= instance.OnAimMove;
            @AimMove.performed -= instance.OnAimMove;
            @AimMove.canceled -= instance.OnAimMove;
            @UniteMove.started -= instance.OnUniteMove;
            @UniteMove.performed -= instance.OnUniteMove;
            @UniteMove.canceled -= instance.OnUniteMove;
            @Score.started -= instance.OnScore;
            @Score.performed -= instance.OnScore;
            @Score.canceled -= instance.OnScore;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // LearnMove
    private readonly InputActionMap m_LearnMove;
    private List<ILearnMoveActions> m_LearnMoveActionsCallbackInterfaces = new List<ILearnMoveActions>();
    private readonly InputAction m_LearnMove_Move1;
    private readonly InputAction m_LearnMove_Move2;
    private readonly InputAction m_LearnMove_Move3;
    public struct LearnMoveActions
    {
        private @PlayerControls m_Wrapper;
        public LearnMoveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move1 => m_Wrapper.m_LearnMove_Move1;
        public InputAction @Move2 => m_Wrapper.m_LearnMove_Move2;
        public InputAction @Move3 => m_Wrapper.m_LearnMove_Move3;
        public InputActionMap Get() { return m_Wrapper.m_LearnMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LearnMoveActions set) { return set.Get(); }
        public void AddCallbacks(ILearnMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Add(instance);
            @Move1.started += instance.OnMove1;
            @Move1.performed += instance.OnMove1;
            @Move1.canceled += instance.OnMove1;
            @Move2.started += instance.OnMove2;
            @Move2.performed += instance.OnMove2;
            @Move2.canceled += instance.OnMove2;
            @Move3.started += instance.OnMove3;
            @Move3.performed += instance.OnMove3;
            @Move3.canceled += instance.OnMove3;
        }

        private void UnregisterCallbacks(ILearnMoveActions instance)
        {
            @Move1.started -= instance.OnMove1;
            @Move1.performed -= instance.OnMove1;
            @Move1.canceled -= instance.OnMove1;
            @Move2.started -= instance.OnMove2;
            @Move2.performed -= instance.OnMove2;
            @Move2.canceled -= instance.OnMove2;
            @Move3.started -= instance.OnMove3;
            @Move3.performed -= instance.OnMove3;
            @Move3.canceled -= instance.OnMove3;
        }

        public void RemoveCallbacks(ILearnMoveActions instance)
        {
            if (m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILearnMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_LearnMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LearnMoveActions @LearnMove => new LearnMoveActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMoveA(InputAction.CallbackContext context);
        void OnMoveB(InputAction.CallbackContext context);
        void OnBasicAttack(InputAction.CallbackContext context);
        void OnAimMove(InputAction.CallbackContext context);
        void OnUniteMove(InputAction.CallbackContext context);
        void OnScore(InputAction.CallbackContext context);
    }
    public interface ILearnMoveActions
    {
        void OnMove1(InputAction.CallbackContext context);
        void OnMove2(InputAction.CallbackContext context);
        void OnMove3(InputAction.CallbackContext context);
    }
}
