//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/PlayerControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""14a5f4ec-fdde-4c62-bf71-47abf4d9c0b6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""295ae0ea-df9c-4d9e-946f-ca104e3e2cc6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveA"",
                    ""type"": ""Button"",
                    ""id"": ""dcdd2881-f2f3-4815-a382-35e684011b52"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveB"",
                    ""type"": ""Button"",
                    ""id"": ""cb75d3cb-8457-4a19-8e49-b369f1d5dedb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""31e8272b-9ad1-461c-a33c-c7411015a2ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimMove"",
                    ""type"": ""Value"",
                    ""id"": ""b93e5996-2034-44f5-80d8-591c88aed7ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UniteMove"",
                    ""type"": ""Button"",
                    ""id"": ""4b467cb6-6650-4779-b886-c931e7143ea7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Score"",
                    ""type"": ""Button"",
                    ""id"": ""49a3dcf1-80bd-4793-a6d3-ee8f5a870fae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelMove"",
                    ""type"": ""Button"",
                    ""id"": ""0a30481e-347e-4607-8cea-5ce405af84aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BattleItem"",
                    ""type"": ""Button"",
                    ""id"": ""7ac68a41-d673-433c-80a1-30b8579cd2bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recall"",
                    ""type"": ""Button"",
                    ""id"": ""4276d91a-8362-443f-941a-1223745cf2e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicAttackWild"",
                    ""type"": ""Button"",
                    ""id"": ""beb62765-5e9f-46e6-86f2-1442a2a0fcf4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82cd5df1-8738-47c6-a113-8a55ec52ee45"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2b1b1590-37d9-4c00-9806-31c797e71cfd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f00c1b09-9567-4b7f-bfa8-8d1748269389"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dfd6d686-ce0a-48cb-b25d-f57e88c8b26f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4df0f3ce-deb4-471b-86f8-d0b4343d9eac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b83e739-07c5-49d8-9e9c-54fbabdef656"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4d2ca503-6876-46ba-b100-830c7c2779c2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c92a01c3-ec02-4baf-9e67-8c3d74e22f68"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""MoveA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f44f620-e5d8-4b8a-a749-54883fd6f7a5"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bd171e6-abae-4822-a178-db1503d504eb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""MoveB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3de4ecc0-e8e1-4112-9f04-e0675d575f9e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80c3c963-34ae-4a2e-95aa-8504eb69a19f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60db12c8-c17b-4d4c-b388-3b06821bd8d9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AimMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40f00e1b-bdbf-42b2-9870-ba1d40de6be9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UniteMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""802164c1-f609-4412-8b24-3f8c385965ed"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""UniteMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27031f69-af24-45cd-ba30-7865a3f9be2f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Score"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6bbbeaf-88f7-4e50-aa35-94cee59e396b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Score"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e6ea5b2-d36e-4d8e-8282-8fdd7c4ab4d4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CancelMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fd6395c-6690-4db5-bef6-346ed89be79e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""CancelMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61f6efb9-e4cb-4879-8448-51c8bbd652aa"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BattleItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""385faa68-e494-4517-9b7d-7d8a71b77ed1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""BattleItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0387a340-d924-4583-b629-10c57ffec2a3"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Recall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a27816f-ae46-4f25-8080-e05dc3c8b227"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Recall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""924c9141-4158-454e-9a99-1f2f387af19b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BasicAttackWild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c565a61-5d38-4ad4-9dc2-2f74cf407a36"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""BasicAttackWild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LearnMove"",
            ""id"": ""408931ae-80f5-4e61-bb67-3e7851eae6a2"",
            ""actions"": [
                {
                    ""name"": ""Move1"",
                    ""type"": ""Button"",
                    ""id"": ""62cf7c61-c07d-4f35-a18d-4b340347ef3d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move2"",
                    ""type"": ""Button"",
                    ""id"": ""2a176320-5752-4cad-9a09-7563a1972267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move3"",
                    ""type"": ""Button"",
                    ""id"": ""3064c63e-edda-470f-9ca5-b5575528e2a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38d13a69-2885-4a64-824a-090007a9c7f4"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07376092-5994-4a70-bde2-a7c3a9a0543b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb6fcd15-c263-4091-9294-ebabfd8d2e09"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PanCamera"",
            ""id"": ""ee14e434-0ddb-4d07-bfaa-02d2310a261c"",
            ""actions"": [
                {
                    ""name"": ""ShouldPan"",
                    ""type"": ""Button"",
                    ""id"": ""11e9b821-25c4-4a49-a03e-46e687923812"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""7b9a8600-bd2f-4b20-8639-795a1d2a270d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6fc8ad2-1ba0-4987-8a10-16f3597592a2"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ShouldPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1432835-1e41-4624-b5bb-3a5a8cb9ada8"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""574b1606-a351-480e-92b5-9927e4f958ac"",
            ""actions"": [
                {
                    ""name"": ""OpenScoreboard"",
                    ""type"": ""Button"",
                    ""id"": ""f0692e0b-6ed1-401f-b223-d05b42f2c92c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseScoreboard"",
                    ""type"": ""Button"",
                    ""id"": ""2e123fa5-c325-4b87-b205-88f0dd350215"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenQuickChat"",
                    ""type"": ""Button"",
                    ""id"": ""7dc978cb-9b1b-482c-8cc4-f1e7526ac8f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ModelRotate"",
                    ""type"": ""Value"",
                    ""id"": ""aa615a11-f45d-47d2-9b83-a07cd3bb1559"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73bea6e1-1356-44f7-a74a-93d7cea20e51"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenScoreboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b84be26-69e0-4614-af86-42eee7a31b0a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CloseScoreboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1f91815-b16b-4bd0-a1b9-8a2497a84c1f"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenQuickChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97d50d20-a673-4181-8959-868d25ae790c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""ModelRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f36d4e25-c621-47f6-9440-312f6002ce84"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ModelRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""db92100f-90a4-4ee8-a098-f1f392ee4e81"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MouseAndKeyboard"",
                    ""action"": ""ModelRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""38b6d4b2-56be-434d-93fa-594e156fc276"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MouseAndKeyboard"",
                    ""action"": ""ModelRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5cd70637-7718-4a3d-8aa9-f69e2c17938f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MouseAndKeyboard"",
                    ""action"": ""ModelRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""28badc87-42a4-42ad-af60-f07f93577aca"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MouseAndKeyboard"",
                    ""action"": ""ModelRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MouseAndKeyboard"",
            ""bindingGroup"": ""MouseAndKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_MoveA = m_Movement.FindAction("MoveA", throwIfNotFound: true);
        m_Movement_MoveB = m_Movement.FindAction("MoveB", throwIfNotFound: true);
        m_Movement_BasicAttack = m_Movement.FindAction("BasicAttack", throwIfNotFound: true);
        m_Movement_AimMove = m_Movement.FindAction("AimMove", throwIfNotFound: true);
        m_Movement_UniteMove = m_Movement.FindAction("UniteMove", throwIfNotFound: true);
        m_Movement_Score = m_Movement.FindAction("Score", throwIfNotFound: true);
        m_Movement_CancelMove = m_Movement.FindAction("CancelMove", throwIfNotFound: true);
        m_Movement_BattleItem = m_Movement.FindAction("BattleItem", throwIfNotFound: true);
        m_Movement_Recall = m_Movement.FindAction("Recall", throwIfNotFound: true);
        m_Movement_BasicAttackWild = m_Movement.FindAction("BasicAttackWild", throwIfNotFound: true);
        // LearnMove
        m_LearnMove = asset.FindActionMap("LearnMove", throwIfNotFound: true);
        m_LearnMove_Move1 = m_LearnMove.FindAction("Move1", throwIfNotFound: true);
        m_LearnMove_Move2 = m_LearnMove.FindAction("Move2", throwIfNotFound: true);
        m_LearnMove_Move3 = m_LearnMove.FindAction("Move3", throwIfNotFound: true);
        // PanCamera
        m_PanCamera = asset.FindActionMap("PanCamera", throwIfNotFound: true);
        m_PanCamera_ShouldPan = m_PanCamera.FindAction("ShouldPan", throwIfNotFound: true);
        m_PanCamera_CameraMove = m_PanCamera.FindAction("CameraMove", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_OpenScoreboard = m_UI.FindAction("OpenScoreboard", throwIfNotFound: true);
        m_UI_CloseScoreboard = m_UI.FindAction("CloseScoreboard", throwIfNotFound: true);
        m_UI_OpenQuickChat = m_UI.FindAction("OpenQuickChat", throwIfNotFound: true);
        m_UI_ModelRotate = m_UI.FindAction("ModelRotate", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Movement.enabled, "This will cause a leak and performance issues, PlayerControls.Movement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LearnMove.enabled, "This will cause a leak and performance issues, PlayerControls.LearnMove.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PanCamera.enabled, "This will cause a leak and performance issues, PlayerControls.PanCamera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerControls.UI.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_MoveA;
    private readonly InputAction m_Movement_MoveB;
    private readonly InputAction m_Movement_BasicAttack;
    private readonly InputAction m_Movement_AimMove;
    private readonly InputAction m_Movement_UniteMove;
    private readonly InputAction m_Movement_Score;
    private readonly InputAction m_Movement_CancelMove;
    private readonly InputAction m_Movement_BattleItem;
    private readonly InputAction m_Movement_Recall;
    private readonly InputAction m_Movement_BasicAttackWild;
    /// <summary>
    /// Provides access to input actions defined in input action map "Movement".
    /// </summary>
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Movement/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        /// <summary>
        /// Provides access to the underlying input action "Movement/MoveA".
        /// </summary>
        public InputAction @MoveA => m_Wrapper.m_Movement_MoveA;
        /// <summary>
        /// Provides access to the underlying input action "Movement/MoveB".
        /// </summary>
        public InputAction @MoveB => m_Wrapper.m_Movement_MoveB;
        /// <summary>
        /// Provides access to the underlying input action "Movement/BasicAttack".
        /// </summary>
        public InputAction @BasicAttack => m_Wrapper.m_Movement_BasicAttack;
        /// <summary>
        /// Provides access to the underlying input action "Movement/AimMove".
        /// </summary>
        public InputAction @AimMove => m_Wrapper.m_Movement_AimMove;
        /// <summary>
        /// Provides access to the underlying input action "Movement/UniteMove".
        /// </summary>
        public InputAction @UniteMove => m_Wrapper.m_Movement_UniteMove;
        /// <summary>
        /// Provides access to the underlying input action "Movement/Score".
        /// </summary>
        public InputAction @Score => m_Wrapper.m_Movement_Score;
        /// <summary>
        /// Provides access to the underlying input action "Movement/CancelMove".
        /// </summary>
        public InputAction @CancelMove => m_Wrapper.m_Movement_CancelMove;
        /// <summary>
        /// Provides access to the underlying input action "Movement/BattleItem".
        /// </summary>
        public InputAction @BattleItem => m_Wrapper.m_Movement_BattleItem;
        /// <summary>
        /// Provides access to the underlying input action "Movement/Recall".
        /// </summary>
        public InputAction @Recall => m_Wrapper.m_Movement_Recall;
        /// <summary>
        /// Provides access to the underlying input action "Movement/BasicAttackWild".
        /// </summary>
        public InputAction @BasicAttackWild => m_Wrapper.m_Movement_BasicAttackWild;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MovementActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MovementActions" />
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MoveA.started += instance.OnMoveA;
            @MoveA.performed += instance.OnMoveA;
            @MoveA.canceled += instance.OnMoveA;
            @MoveB.started += instance.OnMoveB;
            @MoveB.performed += instance.OnMoveB;
            @MoveB.canceled += instance.OnMoveB;
            @BasicAttack.started += instance.OnBasicAttack;
            @BasicAttack.performed += instance.OnBasicAttack;
            @BasicAttack.canceled += instance.OnBasicAttack;
            @AimMove.started += instance.OnAimMove;
            @AimMove.performed += instance.OnAimMove;
            @AimMove.canceled += instance.OnAimMove;
            @UniteMove.started += instance.OnUniteMove;
            @UniteMove.performed += instance.OnUniteMove;
            @UniteMove.canceled += instance.OnUniteMove;
            @Score.started += instance.OnScore;
            @Score.performed += instance.OnScore;
            @Score.canceled += instance.OnScore;
            @CancelMove.started += instance.OnCancelMove;
            @CancelMove.performed += instance.OnCancelMove;
            @CancelMove.canceled += instance.OnCancelMove;
            @BattleItem.started += instance.OnBattleItem;
            @BattleItem.performed += instance.OnBattleItem;
            @BattleItem.canceled += instance.OnBattleItem;
            @Recall.started += instance.OnRecall;
            @Recall.performed += instance.OnRecall;
            @Recall.canceled += instance.OnRecall;
            @BasicAttackWild.started += instance.OnBasicAttackWild;
            @BasicAttackWild.performed += instance.OnBasicAttackWild;
            @BasicAttackWild.canceled += instance.OnBasicAttackWild;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MovementActions" />
        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MoveA.started -= instance.OnMoveA;
            @MoveA.performed -= instance.OnMoveA;
            @MoveA.canceled -= instance.OnMoveA;
            @MoveB.started -= instance.OnMoveB;
            @MoveB.performed -= instance.OnMoveB;
            @MoveB.canceled -= instance.OnMoveB;
            @BasicAttack.started -= instance.OnBasicAttack;
            @BasicAttack.performed -= instance.OnBasicAttack;
            @BasicAttack.canceled -= instance.OnBasicAttack;
            @AimMove.started -= instance.OnAimMove;
            @AimMove.performed -= instance.OnAimMove;
            @AimMove.canceled -= instance.OnAimMove;
            @UniteMove.started -= instance.OnUniteMove;
            @UniteMove.performed -= instance.OnUniteMove;
            @UniteMove.canceled -= instance.OnUniteMove;
            @Score.started -= instance.OnScore;
            @Score.performed -= instance.OnScore;
            @Score.canceled -= instance.OnScore;
            @CancelMove.started -= instance.OnCancelMove;
            @CancelMove.performed -= instance.OnCancelMove;
            @CancelMove.canceled -= instance.OnCancelMove;
            @BattleItem.started -= instance.OnBattleItem;
            @BattleItem.performed -= instance.OnBattleItem;
            @BattleItem.canceled -= instance.OnBattleItem;
            @Recall.started -= instance.OnRecall;
            @Recall.performed -= instance.OnRecall;
            @Recall.canceled -= instance.OnRecall;
            @BasicAttackWild.started -= instance.OnBasicAttackWild;
            @BasicAttackWild.performed -= instance.OnBasicAttackWild;
            @BasicAttackWild.canceled -= instance.OnBasicAttackWild;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MovementActions.UnregisterCallbacks(IMovementActions)" />.
        /// </summary>
        /// <seealso cref="MovementActions.UnregisterCallbacks(IMovementActions)" />
        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MovementActions.AddCallbacks(IMovementActions)" />
        /// <seealso cref="MovementActions.RemoveCallbacks(IMovementActions)" />
        /// <seealso cref="MovementActions.UnregisterCallbacks(IMovementActions)" />
        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MovementActions" /> instance referencing this action map.
    /// </summary>
    public MovementActions @Movement => new MovementActions(this);

    // LearnMove
    private readonly InputActionMap m_LearnMove;
    private List<ILearnMoveActions> m_LearnMoveActionsCallbackInterfaces = new List<ILearnMoveActions>();
    private readonly InputAction m_LearnMove_Move1;
    private readonly InputAction m_LearnMove_Move2;
    private readonly InputAction m_LearnMove_Move3;
    /// <summary>
    /// Provides access to input actions defined in input action map "LearnMove".
    /// </summary>
    public struct LearnMoveActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LearnMoveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LearnMove/Move1".
        /// </summary>
        public InputAction @Move1 => m_Wrapper.m_LearnMove_Move1;
        /// <summary>
        /// Provides access to the underlying input action "LearnMove/Move2".
        /// </summary>
        public InputAction @Move2 => m_Wrapper.m_LearnMove_Move2;
        /// <summary>
        /// Provides access to the underlying input action "LearnMove/Move3".
        /// </summary>
        public InputAction @Move3 => m_Wrapper.m_LearnMove_Move3;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LearnMove; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LearnMoveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LearnMoveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LearnMoveActions" />
        public void AddCallbacks(ILearnMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Add(instance);
            @Move1.started += instance.OnMove1;
            @Move1.performed += instance.OnMove1;
            @Move1.canceled += instance.OnMove1;
            @Move2.started += instance.OnMove2;
            @Move2.performed += instance.OnMove2;
            @Move2.canceled += instance.OnMove2;
            @Move3.started += instance.OnMove3;
            @Move3.performed += instance.OnMove3;
            @Move3.canceled += instance.OnMove3;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LearnMoveActions" />
        private void UnregisterCallbacks(ILearnMoveActions instance)
        {
            @Move1.started -= instance.OnMove1;
            @Move1.performed -= instance.OnMove1;
            @Move1.canceled -= instance.OnMove1;
            @Move2.started -= instance.OnMove2;
            @Move2.performed -= instance.OnMove2;
            @Move2.canceled -= instance.OnMove2;
            @Move3.started -= instance.OnMove3;
            @Move3.performed -= instance.OnMove3;
            @Move3.canceled -= instance.OnMove3;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LearnMoveActions.UnregisterCallbacks(ILearnMoveActions)" />.
        /// </summary>
        /// <seealso cref="LearnMoveActions.UnregisterCallbacks(ILearnMoveActions)" />
        public void RemoveCallbacks(ILearnMoveActions instance)
        {
            if (m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LearnMoveActions.AddCallbacks(ILearnMoveActions)" />
        /// <seealso cref="LearnMoveActions.RemoveCallbacks(ILearnMoveActions)" />
        /// <seealso cref="LearnMoveActions.UnregisterCallbacks(ILearnMoveActions)" />
        public void SetCallbacks(ILearnMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_LearnMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LearnMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LearnMoveActions" /> instance referencing this action map.
    /// </summary>
    public LearnMoveActions @LearnMove => new LearnMoveActions(this);

    // PanCamera
    private readonly InputActionMap m_PanCamera;
    private List<IPanCameraActions> m_PanCameraActionsCallbackInterfaces = new List<IPanCameraActions>();
    private readonly InputAction m_PanCamera_ShouldPan;
    private readonly InputAction m_PanCamera_CameraMove;
    /// <summary>
    /// Provides access to input actions defined in input action map "PanCamera".
    /// </summary>
    public struct PanCameraActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PanCameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PanCamera/ShouldPan".
        /// </summary>
        public InputAction @ShouldPan => m_Wrapper.m_PanCamera_ShouldPan;
        /// <summary>
        /// Provides access to the underlying input action "PanCamera/CameraMove".
        /// </summary>
        public InputAction @CameraMove => m_Wrapper.m_PanCamera_CameraMove;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PanCamera; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PanCameraActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PanCameraActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PanCameraActions" />
        public void AddCallbacks(IPanCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_PanCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PanCameraActionsCallbackInterfaces.Add(instance);
            @ShouldPan.started += instance.OnShouldPan;
            @ShouldPan.performed += instance.OnShouldPan;
            @ShouldPan.canceled += instance.OnShouldPan;
            @CameraMove.started += instance.OnCameraMove;
            @CameraMove.performed += instance.OnCameraMove;
            @CameraMove.canceled += instance.OnCameraMove;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PanCameraActions" />
        private void UnregisterCallbacks(IPanCameraActions instance)
        {
            @ShouldPan.started -= instance.OnShouldPan;
            @ShouldPan.performed -= instance.OnShouldPan;
            @ShouldPan.canceled -= instance.OnShouldPan;
            @CameraMove.started -= instance.OnCameraMove;
            @CameraMove.performed -= instance.OnCameraMove;
            @CameraMove.canceled -= instance.OnCameraMove;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PanCameraActions.UnregisterCallbacks(IPanCameraActions)" />.
        /// </summary>
        /// <seealso cref="PanCameraActions.UnregisterCallbacks(IPanCameraActions)" />
        public void RemoveCallbacks(IPanCameraActions instance)
        {
            if (m_Wrapper.m_PanCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PanCameraActions.AddCallbacks(IPanCameraActions)" />
        /// <seealso cref="PanCameraActions.RemoveCallbacks(IPanCameraActions)" />
        /// <seealso cref="PanCameraActions.UnregisterCallbacks(IPanCameraActions)" />
        public void SetCallbacks(IPanCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_PanCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PanCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PanCameraActions" /> instance referencing this action map.
    /// </summary>
    public PanCameraActions @PanCamera => new PanCameraActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_OpenScoreboard;
    private readonly InputAction m_UI_CloseScoreboard;
    private readonly InputAction m_UI_OpenQuickChat;
    private readonly InputAction m_UI_ModelRotate;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI".
    /// </summary>
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI/OpenScoreboard".
        /// </summary>
        public InputAction @OpenScoreboard => m_Wrapper.m_UI_OpenScoreboard;
        /// <summary>
        /// Provides access to the underlying input action "UI/CloseScoreboard".
        /// </summary>
        public InputAction @CloseScoreboard => m_Wrapper.m_UI_CloseScoreboard;
        /// <summary>
        /// Provides access to the underlying input action "UI/OpenQuickChat".
        /// </summary>
        public InputAction @OpenQuickChat => m_Wrapper.m_UI_OpenQuickChat;
        /// <summary>
        /// Provides access to the underlying input action "UI/ModelRotate".
        /// </summary>
        public InputAction @ModelRotate => m_Wrapper.m_UI_ModelRotate;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIActions" />
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @OpenScoreboard.started += instance.OnOpenScoreboard;
            @OpenScoreboard.performed += instance.OnOpenScoreboard;
            @OpenScoreboard.canceled += instance.OnOpenScoreboard;
            @CloseScoreboard.started += instance.OnCloseScoreboard;
            @CloseScoreboard.performed += instance.OnCloseScoreboard;
            @CloseScoreboard.canceled += instance.OnCloseScoreboard;
            @OpenQuickChat.started += instance.OnOpenQuickChat;
            @OpenQuickChat.performed += instance.OnOpenQuickChat;
            @OpenQuickChat.canceled += instance.OnOpenQuickChat;
            @ModelRotate.started += instance.OnModelRotate;
            @ModelRotate.performed += instance.OnModelRotate;
            @ModelRotate.canceled += instance.OnModelRotate;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIActions" />
        private void UnregisterCallbacks(IUIActions instance)
        {
            @OpenScoreboard.started -= instance.OnOpenScoreboard;
            @OpenScoreboard.performed -= instance.OnOpenScoreboard;
            @OpenScoreboard.canceled -= instance.OnOpenScoreboard;
            @CloseScoreboard.started -= instance.OnCloseScoreboard;
            @CloseScoreboard.performed -= instance.OnCloseScoreboard;
            @CloseScoreboard.canceled -= instance.OnCloseScoreboard;
            @OpenQuickChat.started -= instance.OnOpenQuickChat;
            @OpenQuickChat.performed -= instance.OnOpenQuickChat;
            @OpenQuickChat.canceled -= instance.OnOpenQuickChat;
            @ModelRotate.started -= instance.OnModelRotate;
            @ModelRotate.performed -= instance.OnModelRotate;
            @ModelRotate.canceled -= instance.OnModelRotate;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIActions.UnregisterCallbacks(IUIActions)" />.
        /// </summary>
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIActions" /> instance referencing this action map.
    /// </summary>
    public UIActions @UI => new UIActions(this);
    private int m_GamepadSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_MouseAndKeyboardSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme MouseAndKeyboardScheme
    {
        get
        {
            if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAndKeyboard");
            return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Movement" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MovementActions.AddCallbacks(IMovementActions)" />
    /// <seealso cref="MovementActions.RemoveCallbacks(IMovementActions)" />
    public interface IMovementActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveA" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveA(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveB" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveB(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BasicAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBasicAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AimMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UniteMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUniteMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Score" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScore(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CancelMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancelMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BattleItem" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBattleItem(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Recall" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRecall(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BasicAttackWild" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBasicAttackWild(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LearnMove" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LearnMoveActions.AddCallbacks(ILearnMoveActions)" />
    /// <seealso cref="LearnMoveActions.RemoveCallbacks(ILearnMoveActions)" />
    public interface ILearnMoveActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove3(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PanCamera" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PanCameraActions.AddCallbacks(IPanCameraActions)" />
    /// <seealso cref="PanCameraActions.RemoveCallbacks(IPanCameraActions)" />
    public interface IPanCameraActions
    {
        /// <summary>
        /// Method invoked when associated input action "ShouldPan" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShouldPan(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CameraMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCameraMove(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
    /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
    public interface IUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "OpenScoreboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenScoreboard(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CloseScoreboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseScoreboard(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenQuickChat" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenQuickChat(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ModelRotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnModelRotate(InputAction.CallbackContext context);
    }
}
